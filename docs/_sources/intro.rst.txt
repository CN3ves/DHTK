###############
Getting started
###############

============
Installation
============

In order to install DHTK, `Python 3.x <https://www.python.org/downloads/>`_ is required.
Note that when using a local endpoint, `Docker <https://docs.docker.com/get-docker/>`_ application is required
as DHTK uses a Fuseki container as endpoint.

There are two ways to get DHTK python module:

**1)** Download the `DHTK source code <https://gitlab.com/dhtk/dhtk/tree/master>`_ in your preferred format,
extract the DHTK files and access them via console.

::

    $ cd dhtk
    $ python setup.py

**2)** Use package installer for Python (pip):

::

    $ pip install git+https://gitlab.com/dhtk/dhtk.git


==========
How to use
==========
DHTK is a module for Python3.x. As such, it is accessible using any Python console or environment.
DHTK access occurs in 4 steps:

**1) Import DHTK module**

.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 3-11
    :emphasize-lines: 1

**2) Define DHTK settings**

.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 12-21
    :emphasize-lines: 1

Settings can be defined by passing then as argument at instantiation (`dhtk.start(**kwarg) <./api.html>`_) or
they can be modified using the dot notation.

.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 22-31
    :emphasize-lines: 1

The main settings are *user* and *wd*, respectively the user name and the DHTK's working directory.
These two settings are used to search for saved configurations and correctly
organize the logs and save the search results in the DHTK folder structure.

**3 a) Connect to a** `SPARQL <https://en.wikipedia.org/wiki/SPARQL>`_ **endpoint**

If you're using a remote SPARQL endpoint, you can provide it as a URL (website)
using the *endpoint* setting. After DHTK is set up, this step is simply connects to the
SPARQL endpoint to use. As such, it is integrated with the next step for moist user cases.
However, note that this step performs important checks to ensure DHTK is properly set up.

**3 b) Load the required DHTK extension**

.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 32-38
    :emphasize-lines: 1

Note that the *dataset* setting, defining the DHTK extension module to use, must be defined for the first time,
otherwise DHTK is not aware of which module to load!

Once the module is loaded, DHTK functionalities are ready to use!

**4) Query the dataset using `DHTK extended functionalities <./architecture.html#extension-modules>`_.**
Current extensions include:

* `Project Gutenberg <./intro#gutenberg>`_
* `Auchinkleck manuscript </intro#auchinleck/>`_

Gutenberg
=========

DHTK uses a blueprint for the development of all extension modules, simplifying and unifying the
different functionalities. Using this framework, the Gutenberg extension dataset allows you to
search `Gutenberg.org <gutenberg.org/>`_ for **books, authors, bookshelves and subjects**,
retrieving all the available information on these as book Corpus that can be saved.

1. Searching for an author
--------------------------
.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 39-40
    :emphasize-lines: 1

2. Searching for an subject
---------------------------
.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 41-43
    :emphasize-lines: 1

3. Searching for an bookshelf
-----------------------------
.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 43-46
    :emphasize-lines: 1

4. Searching for an book
------------------------
.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 47-48
    :emphasize-lines: 1

As you can see, a (Python) dictionary-like syntax can be used to search the dataset using
only a small number of arguments:

* *what* to search for.
* *name* of what is being searched. If no name is provided, all available options are retrieved.
* *add* to corpus or just check results first?

5. Get book information
------------------------
.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 49-84
    :emphasize-lines: 1

6. Get book text
----------------
.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 85-88
    :emphasize-lines: 1

7. Get author information
-------------------------
.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 89-145
    :emphasize-lines: 1

8. Save Corpus
--------------
Before saving the Corpus to disk (books and Python object), it is important to change the corpus descriptions,
particularly the corpus name, which is used as the directory where the books will be stored.

.. literalinclude:: ./examples/usage.py
    :language: python
    :lines: 146-171
    :emphasize-lines: 2,3,21



OLD Usage Examples
==================
It looks like get metadata is not implemented!

4. Retrieving/adding metadata: the DbpediaMetadata() class
----------------------------------------------------------

Another important class of DHTK is the DbpediaMetadata() class. Dbpedia is an API of Wikipedia. This API allows retrieving secondary information (metadata) from Wikipedia notes. The Dbpedia() class is initialized as follows:

::

    >>> from dhtk.metadata.dbpedia import DbpediaMetadata
    >>> dbpedia_metadata = DbpediaMetadata()

The DbpediaMetadata() objects give you access to several methods, including, but not limited to:

- get_book_metadata()

- get_author_metadata()

The get_book_metadata() method is used as follows:

::

    >>> from dhtk.metadata.dbpedia import DbpediaMetadata
    >>> dbpedia_metadata = DbpediaMetadata()
    >>> book_metadata = dbpedia_metadata.get_book_metadata(book)
    >>> book.update_metadata(book_metadata)
    >>> book.print_info()

Note that metadata can be saved and used to update the “metadata” field of your Book() objects. The DbpediaMetadata() contains other methods as well. To get more information on those, please see the documentation.

Search metadata
---------------
.. literalinclude:: ./examples/metadata.py
    :lines: 6-
