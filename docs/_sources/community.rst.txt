#########
Community
#########
We are proud to say that the DHTK community is growing continuously.
Being created by the researchers of the "Informatique pour les Sciences Humaines" of the University of Lausanne,
the project has seen an increased interest from both the teachers of other sections and the students,
both from Bachelor and Master programs. DHTK was also presented at the Second Workshop on Humanities in
the Semantic Web (WHiSeII) co-located with 16th International Semantic Web Conference (ISWC 2017),
held in Vienna, Austria in 2017. Multiple visitors of the workshop have expressed interest in DHTK and
the project was well received. As such, people from different walks of life from different parts of the
world have already become a part of our community. You can do so too by contributing to this open source
project.


==========================
How to contribute to DHTK?
==========================

Contributions are essential to our survival, we are thankful for any contribution and are happy to welcome you to the
DHTK community!

Before planning any improvement or addition to DHTK, please write us at: davide.picca@unil.ch

Contributing to DHTK
--------------------
DHTK is a collective open source effort. To contribute and help us improve, visit our GitHub page.
You will find instructions on how to clone the DHTK repository, create your own branch and how to submit your changes
for review as a merge request. All suggestions and improvements are welcomed, they don't have to be major changes!

DHTK modularisation
--------------------------
DHTK is divided into three parts as described in the `architecture <../architecture.html>`_ page.
Active development is expected mostly for the extension processing modules as new datasets and methods are added to
DHTK. The three parts are organised in separate directories (core, extensions, processing) for easier identification
and navigation.


Adding new functionalities
--------------------------
Adding new functionalities to DHTK is as simple as modifying the relevant file.
If a new Python function, class or method is required to improve DHTK usability, then
contributor can add then directly to the code and submit a merge request.


Integrating new modules
-----------------------

DHTK core modules are responsible to locate and load any module within the extension directory.
Due to the modular architecture of DHTK, these extensions can be easily developed as self-sufficient Python modules,
which are alter integrated into the DHTK framework. Doing so requires two steps:

    1) All new module must be place inside this directory *(./dhtk/extensions/new_module)*
    2) The __init__ file for the module must contains a class named Module, inheriting from the
    `AbstractExtension <../extensions.html>`_ blueprint.

The DHTK AbstractExtension class contains most of the required methods to prepare a module for use.
The new Module class is essentially a wrapper around a DHTK extension, defining the self attributes name and url
(name of the extension and location of the RDF data file to use on with the local SPARQL endpoint), and
the methods to query and save the results. Any additional method that improves the Module class can be freely included.
