##########
User Guide
##########

Start DHTK
==========

Loading DHTK
------------

As a Python module, DHTK can be accessed from any Python console or environment
by `importing <https://docs.python.org/3/reference/import.html?highlight=import>`_
it as normally.

.. literalinclude:: ./examples/12_guide_start.py
    :language: python
    :lines: 5

.. literalinclude:: ./examples/12_guide_start.py
    :language: python
    :lines: 9-16

Setting up Configurations
-------------------------

The first step to use DHTK is to set the configurations to use by calling
`dhtk.start() <14_api.html#start>`_

.. literalinclude:: ./examples/12_guide_start.py
    :language: python
    :lines: 20

This function instantiates DHTK's configuration manager class, which searches for the user's saved
configurations. It automatically prints all current setting for the user's information.

.. literalinclude:: ./examples/12_guide_start.py
    :language: python
    :lines: 24-33
    :emphasize-lines: 5

DHTK contains a number of settings which help users making repetitive use of the package.
DHTK will have a default value for most settings, but the user may want to pay
the most attention to the following:

* *[user]*: By default, DHTK try to access the system's information to identify the user. It is possible to change this default user name, which may be particularly relevant for shared machines.

* *[wd]*: By default, DHTK tries to set up its working directory at the user' home directory. If the user wishes to use another directory, it this can be modified.

.. raw:: html

   <details>
   <summary><b><i>!!!</i></b></summary>

.. note:: DHTK uses both *wd* and *user* to search for saved setting. If these are changed for any reason, the user's previous settings may not be indentified.

.. raw:: html

   </details>
   <br>

* *[endpoint]*: DHTK uses a local Fuseki server as its default SPARQL endpoint for queries. To use a remote (on-line) endpoints, it can be dones by adding the URL (link) to the
remote endpoint.

* *[dataset]*: DHTK is a modular packages to each extensions can be easily added. This setting determines
which of the available extension modules DHTK with load.

.. raw:: html

   <details>
   <summary><b><i>!!!</i></b></summary>

.. note:: As illustrated above, dataset does not have a default value and must be set the first time DHTK is used.

.. raw:: html

   </details>
   <br>

.. seealso:: `Settings class <141_core.html#settings>`_

Modifying configurations
------------------------

Configurations can be *set directly* by passing their values as keyword arguments to the dhtk.start function.

.. literalinclude:: ./examples/12_guide_start.py
    :language: python
    :lines: 37-50

.. role:: python(code)
   :language: python

Alternatively, all settings can be *modified* using Python's dot notation to access the configuration
object's attributes. For example, updating the user name is as simple as :python:`configs.user = "egloff"`

Loading extensions
==================

Using the the settings, DHTK will determine which SPARQL endpoint to connect and which
extension module to load. These two functionalities
are all handled by the function `dhtk.get_module() <14_api.html#get_module>`_.

.. literalinclude:: ./examples/12_guide_start.py
    :language: python
    :lines: 37-50

Currently, DHTK includes the following extensions:

* `Project Gutenberg <./intro#gutenberg>`_
* `Auchinkleck manuscript </intro#auchinleck/>`_

.. seealso:: `Client class <141_core.html#sparql-endpoint>`_ and `DatasetLoader class <141_core.html#sparql-endpoint>`_

Gutenberg
---------

DHTK's Gutenberg extension dataset allows you to easily query `Gutenberg.org <gutenberg.org/>`_ 
for **books, authors, bookshelves and subjects**, retrieving all the available information as a Corpus.

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 6-15

DHTK provides a simple dictionary-like syntax to search Guntenberg's dataset using its wrapper method
`.get() <./142_ext.html#AbstractExtension.get>`_. This method allows the user to query the entire dataset using
only a small number of keyword arguments:

* *what* to search for.
* *name* of what is being searched. If no name is provided, all available options are retrieved.
* *add* to corpus or just search results?

Searching Gutenberg
*******************

To **search** Gutenberg's data, set *add=False*. Alternatively, since this is de default value, this
argument can be simply ignored. This returns either:

**1)** a list of books matching the bookshelf or subject queried or
**2)** a dictionary of books or authors matching the query.

.. raw:: html

   <details>
   <summary><b><i>!!!</i></b></summary>

.. note:: The difference in value returns is related to the fact that searching a bookshelf or a subject is a more
general query and does not return a collection of book or author objects, but only the book titles.
This means that no metadata is returns with this queries. On the other hand, returning books and author queries as a
dictionary makes it easier to retrieve and explore individual entries using Python.

.. raw:: html

   </details>
   <br>

.. rubric:: **Searching for a bookshelf**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 19-32
    :emphasize-lines: 9

.. rubric:: **Searching for a subject**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 36-51
    :emphasize-lines: 11

.. rubric:: **Searching for a book**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 55-57
    :emphasize-lines: 3

.. rubric:: **Searching for an author**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 61-65
    :emphasize-lines: 5

Get Gutenberg's metadata
************************

.. rubric:: **Get book information**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 49-84
    :emphasize-lines: 1

.. rubric:: **Get book text**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 85-88
    :emphasize-lines: 1

.. rubric:: **Get author information**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 89-145
    :emphasize-lines: 1

.. rubric:: **Get author information from book**

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 89-145
    :emphasize-lines: 1

.. rubric:: **Save Corpus**

Before saving the Corpus to disk, it is important to review the Corpus descriptions,
particularly the corpus name, which is used as the directory where the books will be stored.

.. literalinclude:: ./examples/12_guide_gutenberg.py
    :language: python
    :lines: 146-171
    :emphasize-lines: 2,3,21


Dbpedia
=======
IT LOOKS LIKE metadata is not test (wrapped by Gutenberg) as per issue #6

.. rubric:: Retrieving/adding metadata: the DbpediaMetadata() class

Another important class of DHTK is the DbpediaMetadata() class. Dbpedia is an API of Wikipedia. This API allows retrieving secondary information (metadata) from Wikipedia notes. The Dbpedia() class is initialized as follows:

::

    >>> from dhtk.metadata.dbpedia import DbpediaMetadata
    >>> dbpedia_metadata = DbpediaMetadata()

The DbpediaMetadata() objects give you access to several methods, including, but not limited to:

- get_book_metadata()

- get_author_metadata()

The get_book_metadata() method is used as follows:

::

    >>> from dhtk.metadata.dbpedia import DbpediaMetadata
    >>> dbpedia_metadata = DbpediaMetadata()
    >>> book_metadata = dbpedia_metadata.get_book_metadata(book)
    >>> book.update_metadata(book_metadata)
    >>> book.print_info()

Note that metadata can be saved and used to update the “metadata” field of your Book() objects. The DbpediaMetadata() contains other methods as well. To get more information on those, please see the documentation.

Search metadata
---------------
.. literalinclude:: ./examples/metadata.py
    :lines: 6-
