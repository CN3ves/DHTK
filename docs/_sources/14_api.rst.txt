########
DHTK API
########

Interface
=========

For simplicity, the core DHTK functionalities are controlled using only two wrapper functions:
start() and get_module()


dhtk.start()
------------
Main DHTK initiation function. Works as a simple interface to the DHTK Settings class,
accepting and filtering invalid or misspelled arguments for instantiation of the DHTK Settings.

.. autofunction:: dhtk.core.__init__.start

.. note:: DHTK uses both *wd* and *user* to search for saved settings. If different values are passed to DHTK, the user's previous settings may not be properly acessible.

.. seealso:: `Settings class <141_core.html#settings>`_

dhtk.get_module()
-----------------

DHTK's loading function. This function uses the DHTK configurations for
the two main start up tasks:

* Check and connect to the `SPARQL <https://en.wikipedia.org/wiki/SPARQL>`_ endpoint

.. note:: This step includes system checks to ensure the endpoint is properly set up. As such, it may take some time to finish the first time it is run.

* Load the required DHTK extension

.. note:: The *dataset* setting, which defines the DHTK extension module to use, must be defined for the first time and may take considerable time to set up locally.

.. autofunction:: dhtk.core.__init__.get_module

.. seealso:: `Client class <141_core.html#sparql-endpoint>`_ and `DatasetLoader <141_core.html#dataset-manager>`_

Details
=======

.. toctree::
   :maxdepth: 1

   Core API <141_core>
   Extensions API <142_ext>
   Processing API <143_proc>









